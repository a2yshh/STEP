// File: SecurityClearance.java
import java.util.Arrays;
import java.util.Objects;

public final class SecurityClearance {
    private final String clearanceId;
    private final String level;
    private final String[] authorizedSections;
    private final long expirationDate;

    public SecurityClearance(String clearanceId, String level, String[] authorizedSections, long expirationDate) {
        if (clearanceId == null || clearanceId.isBlank()) throw new IllegalArgumentException("Invalid clearanceId");
        if (level == null || level.isBlank()) throw new IllegalArgumentException("Invalid clearance level");
        if (authorizedSections == null || authorizedSections.length == 0) throw new IllegalArgumentException("Authorized sections required");
        if (expirationDate <= 0) throw new IllegalArgumentException("Invalid expiration date");

        this.clearanceId = clearanceId;
        this.level = level;
        this.authorizedSections = authorizedSections.clone();
        this.expirationDate = expirationDate;
    }

    public String getClearanceId() { return clearanceId; }
    public String getLevel() { return level; }
    public String[] getAuthorizedSections() { return authorizedSections.clone(); }
    public long getExpirationDate() { return expirationDate; }

    public final boolean canAccess(String section) {
        for (String s : authorizedSections) {
            if (s.equalsIgnoreCase(section)) return true;
        }
        return false;
    }

    public final boolean isExpired() {
        return System.currentTimeMillis() > expirationDate;
    }

    public final int getAccessHash() {
        return Objects.hash(clearanceId, level, Arrays.hashCode(authorizedSections), expirationDate);
    }
}

// File: CrewRank.java
import java.util.Arrays;

public final class CrewRank {
    private final String rankName;
    private final int level;
    private final String[] permissions;

    private CrewRank(String rankName, int level, String[] permissions) {
        this.rankName = rankName;
        this.level = level;
        this.permissions = permissions.clone();
    }

    public String getRankName() { return rankName; }
    public int getLevel() { return level; }
    public String[] getPermissions() { return permissions.clone(); }

    public static CrewRank createCadet() { return new CrewRank("Cadet", 1, new String[]{"Train", "Assist"}); }
    public static CrewRank createOfficer() { return new CrewRank("Officer", 2, new String[]{"Patrol", "Operate"}); }
    public static CrewRank createCommander() { return new CrewRank("Commander", 3, new String[]{"Lead", "Strategize"}); }
    public static CrewRank createCaptain() { return new CrewRank("Captain", 4, new String[]{"Command", "Authorize"}); }
    public static CrewRank createAdmiral() { return new CrewRank("Admiral", 5, new String[]{"Oversee", "Control"}); }
}

// File: SpaceCrew.java
import java.util.UUID;

public class SpaceCrew {
    private final String crewId;
    private final String homeplanet;
    private final SecurityClearance clearance;
    private final CrewRank initialRank;

    private CrewRank currentRank;
    private int missionCount;
    private double spaceHours;

    public static final String STATION_NAME = "Stellar Odyssey";
    public static final int MAX_CREW_CAPACITY = 50;

    // Emergency recruitment
    public SpaceCrew() {
        this("Unknown", "Mars", CrewRank.createCadet(), new SecurityClearance(UUID.randomUUID().toString(), "Low", new String[]{"Commons"}, System.currentTimeMillis() + 1000000), 0, 0);
    }

    // Standard recruitment
    public SpaceCrew(String name, String homeplanet, CrewRank initialRank) {
        this(name, homeplanet, initialRank, new SecurityClearance(UUID.randomUUID().toString(), "Medium", new String[]{"Commons", "Labs"}, System.currentTimeMillis() + 5000000), 0, 0);
    }

    // Experienced transfer
    public SpaceCrew(String name, String homeplanet, CrewRank initialRank, int missionCount, double spaceHours) {
        this(name, homeplanet, initialRank, new SecurityClearance(UUID.randomUUID().toString(), "High", new String[]{"Commons", "Labs", "Control"}, System.currentTimeMillis() + 10000000), missionCount, spaceHours);
    }

    // Full detailed constructor
    public SpaceCrew(String name, String homeplanet, CrewRank initialRank, SecurityClearance clearance, int missionCount, double spaceHours) {
        this.crewId = "CREW-" + UUID.randomUUID();
        this.homeplanet = homeplanet;
        this.initialRank = initialRank;
        this.currentRank = initialRank;
        this.clearance = clearance;
        this.missionCount = missionCount;
        this.spaceHours = spaceHours;
    }

    private boolean canAccessSection(String section) {
        return clearance.canAccess(section) && !clearance.isExpired();
    }

    public final String getCrewIdentification() {
        return crewId + "-" + initialRank.getRankName();
    }

    public final boolean canBePromoted() {
        return missionCount > 5 && spaceHours > 100;
    }

    public final int calculateSecurityRating() {
        return clearance.getAccessHash() + initialRank.getLevel();
    }

    private final boolean validateClearanceLevel() {
        return !clearance.isExpired();
    }

    public String toString() {
        return "SpaceCrew{" + crewId + ", homeplanet=" + homeplanet + ", rank=" + currentRank.getRankName() + ", missions=" + missionCount + ", hours=" + spaceHours + "}";
    }
}

// File: CommandCrew.java
import java.util.Collections;
import java.util.Set;

public class CommandCrew {
    private final Set<String> commandCertifications;
    private final SpaceCrew crew;

    public CommandCrew(SpaceCrew crew, Set<String> certifications) {
        this.crew = crew;
        this.commandCertifications = Collections.unmodifiableSet(certifications);
    }

    public Set<String> getCommandCertifications() { return commandCertifications; }
    public SpaceCrew getCrew() { return crew; }
}

// File: PilotCrew.java
import java.util.Collections;
import java.util.Set;

public class PilotCrew {
    private final Set<String> flightCertifications;
    private final SpaceCrew crew;

    public PilotCrew(SpaceCrew crew, Set<String> certifications) {
        this.crew = crew;
        this.flightCertifications = Collections.unmodifiableSet(certifications);
    }

    public Set<String> getFlightCertifications() { return flightCertifications; }
    public SpaceCrew getCrew() { return crew; }
}

// File: ScienceCrew.java
public class ScienceCrew {
    private final String researchSpecialty;
    private final SpaceCrew crew;

    public ScienceCrew(SpaceCrew crew, String researchSpecialty) {
        this.crew = crew;
        this.researchSpecialty = researchSpecialty;
    }

    public String getResearchSpecialty() { return researchSpecialty; }
    public SpaceCrew getCrew() { return crew; }
}

// File: EngineerCrew.java
public class EngineerCrew {
    private final String engineeringType;
    private final SpaceCrew crew;

    public EngineerCrew(SpaceCrew crew, String engineeringType) {
        this.crew = crew;
        this.engineeringType = engineeringType;
    }

    public String getEngineeringType() { return engineeringType; }
    public SpaceCrew getCrew() { return crew; }
}

// File: SpaceStationRegistry.java
import java.util.*;

public final class SpaceStationRegistry {
    private static final Map<String, Object> crewRegistry = new HashMap<>();

    public static boolean registerCrew(Object crew) {
        if (crew == null) return false;
        crewRegistry.put(UUID.randomUUID().toString(), crew);
        return true;
    }

    public static List<Object> getCrewByType(String type) {
        List<Object> result = new ArrayList<>();
        for (Object obj : crewRegistry.values()) {
            if (obj.getClass().getSimpleName().equalsIgnoreCase(type)) {
                result.add(obj);
            }
        }
        return result;
    }
}

// File: Main.java
import java.util.Set;

public class Main {
    public static void main(String[] args) {
        SpaceCrew cadet = new SpaceCrew("John", "Earth", CrewRank.createCadet());
        SpaceCrew commander = new SpaceCrew("Alice", "Venus", CrewRank.createCommander(), 10, 200);

        CommandCrew commandCrew = new CommandCrew(commander, Set.of("Tactical", "Strategic"));
        PilotCrew pilotCrew = new PilotCrew(cadet, Set.of("Shuttle", "Fighter"));

        SpaceStationRegistry.registerCrew(commandCrew);
        SpaceStationRegistry.registerCrew(pilotCrew);

        System.out.println("=== Crew Demo ===");
        System.out.println(cadet);
        System.out.println(commander);
        System.out.println("Cadet can be promoted? " + cadet.canBePromoted());
        System.out.println("Commander can be promoted? " + commander.canBePromoted());

        System.out.println("\n=== Registry Query ===");
        System.out.println(SpaceStationRegistry.getCrewByType("CommandCrew"));
        System.out.println(SpaceStationRegistry.getCrewByType("PilotCrew"));
    }
}
